# FastAPI imports for routing, dependency injection, and error handling
from fastapi import APIRouter, Depends, HTTPException

# SQLAlchemy ORM Session type
from sqlalchemy.orm import Session

# Function to get a new DB session
from database import SessionLocal

# SQLAlchemy User model (used to interact with the users table)
from models import User

# Pydantic schemas for request and response validation
from schemas import UserCreate, UserOut

# Utility function for securely hashing passwords
from utils import hash_password

# Create a router for user-related endpoints
router = APIRouter(prefix="/users", tags=["Users"])

# -----------------------------
# Dependency to get DB session
# -----------------------------
# This function gives a database session to each route function
def get_db():
    db = SessionLocal()  # create a new DB session
    try:
        yield db         # make it available to the route
    finally:
        db.close()       # always close the session after use

# -----------------------------
# Route: POST /users/
# Create a new user
# -----------------------------
@router.post("/", response_model=UserOut)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    """
    Create a new user if username does not already exist.
    Steps:
    1. Check if the username is already taken
    2. Hash the incoming password
    3. Create a new User instance
    4. Add and commit to the DB
    5. Return the user (response_model filters sensitive data)
    """
    # Check for duplicate username
    existing_user = db.query(User).filter(User.username == user.username).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="Username already exists")

    # Hash the password for security
    hashed_pw = hash_password(user.password)

    # Create new user object (SQLAlchemy model instance)
    new_user = User(username=user.username, email=user.email, hashed_password=hashed_pw)

    # Add the user to the DB and save
    db.add(new_user)
    db.commit()
    db.refresh(new_user)  # refresh to get autogenerated fields (like ID)

    # Return user (only public fields via UserOut)
    return new_user

# -----------------------------
# Route: GET /users/
# Get a list of all users
# -----------------------------
@router.get("/", response_model=list[UserOut])
def get_users(db: Session = Depends(get_db)):
    """
    Fetch and return all users from the database.
    Returns only public fields using UserOut schema.
    """
    return db.query(User).all()

# -----------------------------
# Route: GET /users/{user_id}
# Get a single user by ID
# -----------------------------
@router.get("/{user_id}", response_model=UserOut)
def get_user(user_id: int, db: Session = Depends(get_db)):
    """
    Retrieve a user by ID.
    If user not found, return 404 error.
    """
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

# -----------------------------
# Route: DELETE /users/{user_id}
# Delete a user by ID
# -----------------------------
@router.delete("/{user_id}")
def delete_user(user_id: int, db: Session = Depends(get_db)):
    """
    Delete a user by their ID.
    If not found, return 404.
    """
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    db.delete(user)
    db.commit()

    return {"message": "User deleted"}


# -----------------------------------------------
# ðŸ“˜ Key Concepts Used in This File (For Freshers)
# -----------------------------------------------
# | Concept                  | Explanation                                             |
# | ------------------------ | ------------------------------------------------------- |
# | `Depends(get_db)`        | Injects a DB session automatically                      |
# | `response_model=UserOut` | Ensures sensitive fields (like password) are excluded   |
# | `hash_password()`        | Encrypts the password before storing it                 |
# | `HTTPException`          | Used for 400/404 error handling                         |
# | `db.commit()`            | Saves changes to the database                           |
# | `db.refresh()`           | Updates the instance with values like auto-generated ID |
